From 4bc7123b9a6049717acc161d429dfabf7464472a Mon Sep 17 00:00:00 2001
From: Akshith-T <akshitht03@gmail.com>
Date: Mon, 29 Jul 2024 15:42:32 +0530
Subject: [PATCH 1/2] update

---
 client3.py | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/client3.py b/client3.py
index 3fc09b7..a31782f 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,13 @@ def getDataPoint(quote):
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price+ask_price)/2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
-    """ Get ratio of price_a and price_b """
-    """ ------------- Update this function ------------- """
-    return 1
+    if(price_b==0): return
+    return price_a/price_b
 
 
 # Main
@@ -50,10 +49,11 @@ if __name__ == "__main__":
     # Query the price once every N seconds.
     for _ in iter(range(N)):
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
-
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
-- 
2.34.1


From 358a3f28806fc37a947e1b3cef074532c06705a6 Mon Sep 17 00:00:00 2001
From: Akshith-T <akshitht03@gmail.com>
Date: Mon, 29 Jul 2024 15:44:33 +0530
Subject: [PATCH 2/2] update

---
 first.py | 42 ------------------------------------------
 1 file changed, 42 deletions(-)
 delete mode 100644 first.py

diff --git a/first.py b/first.py
deleted file mode 100644
index 26e3b2c..0000000
--- a/first.py
+++ /dev/null
@@ -1,42 +0,0 @@
-class Car:
-
-    def __init__(self, speed=0):
-        self.speed = speed
-        self.odometer = 0
-        self.time = 0
-
-    def accelerate(self):
-        self.speed += 5
-
-    def brake(self):
-        self.speed -= 5
-
-    def step(self):
-        self.odometer += self.speed
-        self.time += 1
-
-    def average_speed(self):
-        return self.odometer / self.time
-
-
-if __name__ == '__main__':
-
-    my_car = Car()
-    print("I'm a car!")
-    while True:
-        action = input("What should I do? [A]ccelerate, [B]rake, "
-                        "show [O]dometer, or show average [S]peed?").upper()
-        if action not in "ABOS" or len(action) != 1:
-            print("I don't know how to do that")
-            continue
-        if action == 'A':
-            my_car.accelerate()
-            print("Accelerating...")
-        elif action == 'B':
-            my_car.brake()
-            print("Braking...")
-        elif action == 'O':
-            print("The car has driven {} kilometers".format(my_car.odometer))
-        elif action == 'S':
-            print("The car's average speed was {} kph".format(my_car.average_speed()))
-        my_car.step()
\ No newline at end of file
-- 
2.34.1

